class Vulnerability:
    def __init__(self, id, name, severity, description, status="Open"):
        self.id = id
        self.name = name
        self.severity = severity
        self.description = description
        self.status = status

    def update_status(self, status):
        self.status = status

    def __str__(self):
        return f"[{self.id}] {self.name} (Severity: {self.severity}) - {self.status}\nDescription: {self.description}"


class VulnerabilityManager:
    def __init__(self):
        self.vulnerabilities = {}

    def add_vulnerability(self, id, name, severity, description):
        if id in self.vulnerabilities:
            print("Vulnerability with this ID already exists.")
        else:
            vulnerability = Vulnerability(id, name, severity, description)
            self.vulnerabilities[id] = vulnerability
            print(f"Added vulnerability: {name}")

    def list_vulnerabilities(self):
        if not self.vulnerabilities:
            print("No vulnerabilities found.")
        else:
            for v in self.vulnerabilities.values():
                print(v)

    def update_vulnerability_status(self, id, status):
        if id in self.vulnerabilities:
            self.vulnerabilities[id].update_status(status)
            print(f"Updated status of vulnerability ID {id} to {status}.")
        else:
            print("Vulnerability not found.")

    def remove_vulnerability(self, id):
        if id in self.vulnerabilities:
            del self.vulnerabilities[id]
            print(f"Removed vulnerability ID {id}.")
        else:
            print("Vulnerability not found.")


# Example usage:
if __name__ == "__main__":
    vm = VulnerabilityManager()

    # Add vulnerabilities
    vm.add_vulnerability(1, "SQL Injection", "High", "SQL injection vulnerability in the login form.")
    vm.add_vulnerability(2, "Cross-Site Scripting (XSS)", "Medium", "XSS vulnerability in the comments section.")

    # List vulnerabilities
    vm.list_vulnerabilities()

    # Update vulnerability status
    vm.update_vulnerability_status(1, "Resolved")

    # Remove a vulnerability
    vm.remove_vulnerability(2)

    # List vulnerabilities again
    vm.list_vulnerabilities()
